name: ci

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'dev'
          java-version: '17'
          components: 'native-image,ruby'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      - name: Install app_info gem
        run: gem install app-info -v 2.8.3
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      -
        name: Run unit tests
        run: |
          chmod +x run_unit_tests.sh
          ./run_unit_tests.sh
        env:
          GPR_USERNAME: ${{ github.actor }}
          GPR_PAT: ${{ secrets.GITHUB_TOKEN }}

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: KengoTODA/actions-setup-docker-compose@main
        with:
          version: '2.14.2'
      # -
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # -
      #   name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and cache
        uses: docker/build-push-action@v3
        with:
          file: Dockerfile-integration-test
          push: false
          tags: deployapp-storagemanagementservice-integration-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      -
        name: Run integration tests
        run: |
          chmod +x run_integration_tests.sh
          ./run_integration_tests.sh
        env:
          GPR_USERNAME: ${{ github.actor }}
          GPR_PAT: ${{ secrets.GITHUB_TOKEN }}

  docker-image:
    # needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'dev'
          java-version: '17'
          components: 'native-image,ruby'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      - name: bootJar (tagged)
        if: startsWith(github.ref, 'refs/tags')
        run: |
          chmod +x ./gradlew
          ./gradlew -Pversion=${{ github.ref_name }} bootJar
        env:
          GPR_USERNAME: ${{ github.actor }}
          GPR_PAT: ${{ secrets.GITHUB_TOKEN }}

      - name: bootJar (not tagged)
        if: startsWith(github.ref, 'refs/tags') != true
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar
        env:
          GPR_USERNAME: ${{ github.actor }}
          GPR_PAT: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: transfusion/deployapp-storage-service
          # flavor: latest=true
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      -
        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}